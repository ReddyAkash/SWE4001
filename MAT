//pass-1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {

  FILE *f1, *f2, *f3, *f4;
  char label[10], opcode[10], operand[10];
  char code[10], mnemonic[3];

  f1 = fopen("input.txt", "r");
  f2 = fopen("intermediate.txt", "w");
  f3 = fopen("optab.txt", "r");
  f4 = fopen("symtab.txt", "w+");

  int loc;

  if (f1 != NULL) {
  	
    //read first line
    fscanf(f1, "%s\t%s\t%s", label, opcode, operand);
    if (strcmp(opcode, "START") == 0) {
          loc = (int)strtol(operand, NULL, 16);
          printf("*\t%s\t%s\t%s\n", label, opcode, operand);
          fprintf(f2, "*\t%s\t%s\t%s\n", label, opcode, operand);
          fscanf(f1, "%s\t%s\t%s", label, opcode, operand);	// read nxt line
    } 
    else {
          loc = 0000;
    }

      while (strcmp(opcode, "END") != 0) {
      	printf("%04X\t%s\t%s\t%s\n", loc, label, opcode, operand);
        fprintf(f2, "%04X\t%s\t%s\t%s\n", loc, label, opcode, operand);
        
        // symtab	
        rewind(f4);
        char lab[10], exe[10];
        fscanf(f4, "%s\t%s", lab, exe);
		while (!feof(f4)){		
			if (strcmp(label, lab) == 0){			
				break;
			}
      		fscanf(f4, "%s\t%s", lab, exe);
      	}
      	if (strcmp(label, "*") != 0) {
        	fprintf(f4, "%04X\t%s\n", loc, label);
      	}
	
      // optab
      rewind(f3);
      fscanf(f3, "%s\t%s", code, mnemonic);

      while (strcmp(code, "END") != 0) {
              if (strcmp(opcode, code) == 0) {
                  loc += 3;
                  break;
              }
              // read nxt line
              fscanf(f3, "%s\t%s", code, mnemonic);
      }
	  
          // WORD = 3 + loc
          if (strcmp(opcode, "WORD") == 0) {
              loc += 3;
          }
            // RESW = 3*operand + loc
          else if (strcmp(opcode, "RESW") == 0) {
              loc += (3 * (atoi(operand)));
          }
            // BYTE = 1 + loc 
          else if (strcmp(opcode, "BYTE") == 0) {
              loc++;
          }
            // RESB = operand + loc
          else if (strcmp(opcode, "RESB") == 0) {
              loc += atoi(operand);
          }

          // read next line
          fscanf(f1, "%s\t%s\t%s", label, opcode, operand);
    }
    printf("*\t%s\t%s\t%s\n", label, opcode, operand);
    fprintf(f2, "*\t%s\t%s\t%s\n", label, opcode, operand);

    fclose(f1);
    fclose(f2);
    fclose(f3);
    fclose(f4);
  }

  return 0;
}

//pass-2
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
	FILE *f1, *f2, *f3, *f4, *f5;
	char label[10], opcode[10], operand[10], loc[10], start[10];
	char code[10], mnemonic[3];
	int end, len = 0;
	
	f1 = fopen("intermediate.txt", "r");
	f2 = fopen("symtab.txt", "r");
	f3 = fopen("optab.txt", "r");
	f4 = fopen("objcode.txt", "w+");
	f5 = fopen("objpgm.txt", "w+");
	
	if (f1 != NULL) {
		
		fscanf(f1, "%s\t%s\t%s\t%s", loc, label, opcode, operand);
		while (!feof(f1)) {
			if (strcmp(loc, "*") != 0 && strcmp(loc, " ") != 0) {
				end = (int)strtol(loc, NULL, 16);
			}
			if (strcmp(label, "*") == 0 && strcmp(loc, "*") != 0) {
				len += 3;
			}
			fscanf(f1, "%s\t%s\t%s\t%s", loc, label, opcode, operand);
		}
		
		//read first line
		rewind(f1);
		fscanf(f1, "%s\t%s\t%s\t%s", loc, label, opcode, operand);
		if (strcmp(opcode, "START") == 0) {
			fprintf(f4, "%s\t%s\t%s\t%s\n", loc, label, opcode, operand);
			end = end - (int)strtol(operand, NULL, 16) + 3;
			fprintf(f5, "H\t%s\t00%s\t%06X\nT\t%X\t", label, operand, end, len);
			fscanf(f1, "%s\t%s\t%s\t%s", loc, label, opcode, operand);	//read nxt line
			strcpy(start, loc);
		}
		else {
			fprintf(f4, "\t\t%s\t%s\t%s\n", label, opcode, operand);
			fprintf(f5, "H\t*\t000000\t\nT\t%X\t", end);
			fscanf(f1, "%s\t%s\t%s\t%s", loc, label, opcode, operand);	//read nxt line
		}
		
		while (strcmp(opcode, "END") != 0) {
			printf("%s\t%s\t%s\t%s\n", loc, label, opcode, operand);
			fprintf(f4, "%s\t%s\t%s\t%s\t", loc, label, opcode, operand);
			
			// search in optab
			rewind(f3);
			fscanf(f3, "%s\t%s", code, mnemonic);
			while (strcmp(code, "END") != 0) {
				if (strcmp(opcode, code) == 0) {
					fprintf(f4, "%s", mnemonic);
					fprintf(f5, "%s", mnemonic);
					break;
				}
				fscanf(f3, "%s\t%s", code, mnemonic); // read nxt line
			}
			
			// search symtab
			rewind(f2);
			char lab[10], exe[10];
			fscanf(f2, "%s\t%s", lab, exe);
			while (!feof(f2)) {
				if (strcmp(operand, exe) == 0) {
					fprintf(f4, "%s\n", lab);
					fprintf(f5, "%s\t", lab);
				}
				fscanf(f2, "%s\t%s", lab, exe);
			}
			
			// WORD or BYTE or RESB or RESW
			if (strcmp(opcode, "WORD") == 0) {
				fprintf(f4, "%06s\n", operand);
			}
			else if (strcmp(opcode, "BYTE") == 0) {
				fprintf(f4, "%06s\n", operand);
			}
			else if (strcmp(opcode, "RESW") == 0) {
				//fprintf(f4, "%s\t%s\t%s\t%s\n", loc, label, opcode, operand);
				fprintf(f4, "\n");
			}
			else if (strcmp(opcode, "RESB") == 0) {
				fprintf(f4, "\n");
			}
			
			fscanf(f1, "%s\t%s\t%s\t%s", loc, label, opcode, operand);
		}
		
		fprintf(f5, "\nE\t%06s", start);
		fprintf(f4, "%s\t%s\t%s\t%s\n", loc, label, opcode, operand);
	}
	
	fclose(f1);
	fclose(f2);
	fclose(f3);
	fclose(f4);
	fclose(f5);
	
	return 0;
}

//input.txt
/*
SAMPLE  START   1000
*  LDA   ALPHA
*  ADD	INCR
*  SUB	ONE
*  STA	BETA
*  LDA	GAMMA
*  ADD	INCR
*  STA	DELTA
ONE WORD  1
ALPHA RESW  1
BETA	RESW	2
GAMMA	RESW	1
DELTA	RESW	1
INCR	RESW	1
*  END	SAMPLE
*/

//optab.txt
/*
LDA	00
ADD	18
SUB	1C
STA 0C
END
*/

//symtab.txt
/*
1015	ONE
1018	ALPHA
101B	BETA
1021	GAMMA
1024	DELTA
1027	INCR
*/

// objpgm
/*
H	SAMPLE	001000	00002A
T	15	001018	181027	1C1015	0C101B	001021	181027	0C1024	
E	001000
*/

//objcode.txt
/*
*	SAMPLE	START	1000
1000	*	LDA	ALPHA	001018
1003	*	ADD	INCR	181027
1006	*	SUB	ONE	1C1015
1009	*	STA	BETA	0C101B
100C	*	LDA	GAMMA	001021
100F	*	ADD	INCR	181027
1012	*	STA	DELTA	0C1024
1015	ONE	WORD	1	000001
1018	ALPHA	RESW	1	
101B	BETA	RESW	2	
1021	GAMMA	RESW	1	
1024	DELTA	RESW	1	
1027	INCR	RESW	1	
*	*	END	SAMPLE
*/

//intermediate.txt
/*
*	SAMPLE	START	1000
1000	*	LDA	ALPHA
1003	*	ADD	INCR
1006	*	SUB	ONE
1009	*	STA	BETA
100C	*	LDA	GAMMA
100F	*	ADD	INCR
1012	*	STA	DELTA
1015	ONE	WORD	1
1018	ALPHA	RESW	1
101B	BETA	RESW	2
1021	GAMMA	RESW	1
1024	DELTA	RESW	1
1027	INCR	RESW	1
*	*	END	SAMPLE
*/



//symbol table

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct table {
    char var[50];
    int add;
};

int main() {
    struct table table[10];
    int n;
    int a = 1000;
    
    // Initialize the table entries to empty strings
    for (int i = 0; i < 10; i++) {
        strcpy(table[i].var, "");
    }
    
    while (1) {
        printf("Enter the choice of operation to perform \n1. Create\n2. Insert \n3. Modify\n4. Search \n5. Display \n6. Exit\n");
        scanf("%d", &n);
        
        if (n == 1) {
            char line[50];
            FILE *file = fopen("input.txt", "r");
            if (file != NULL) {
                int i = 0;
                while (fgets(line, sizeof(line), file) && i < 10) {
                    line[strcspn(line, "\n")] = 0;  // Remove newline character
                    strcpy(table[i].var, line);
                    table[i].add = a;
                    a = a + 3;
                    i++;
                }
                fclose(file);
            } else {
                printf("Failed to open file.\n");
            }
        }
        else if (n == 2) {
            if (table[9].var[0] != '\0') {
                printf("Table already full\n");
            } else {
                char var[50];
                printf("Enter the variable name: ");
                scanf("%s", var);
                
                int j = 0;
                for (int i = 0; i < 10; i++) {
                    if (strcmp(table[i].var, var) == 0) {
                        j = 1;
                        break;
                    }
                }
                
                if (j == 0) {
                    for (int i = 0; i < 10; i++) {
                        if (table[i].var[0] == '\0') {
                            strcpy(table[i].var, var);
                            table[i].add = a;
                            a += 3;
                            break;
                        }
                    }
                }
            }
        }
        else if (n == 3) {
            char var[50], var2[50];
            printf("Enter the variable name to modify: ");
            scanf("%s", var);
            printf("Enter the new variable name: ");
            scanf("%s", var2);
            
            int j = 0;
            for (int i = 0; i < 10; i++) {
                if (strcmp(table[i].var, var) == 0) {
                    strcpy(table[i].var, var2);
                    j = 1;
                    break;
                }
            }
            
            if (j == 0) {
                printf("Variable not found\n");
            }
        }
        else if (n == 4) {
            char var[50];
            printf("Enter the variable name to search: ");
            scanf("%s", var);
            
            int j = 0;
            for (int i = 0; i < 10; i++) {
                if (strcmp(table[i].var, var) == 0) {
                    printf("%s address = %d\n", var, table[i].add);
                    j = 1;
                    break;
                }
            }
            
            if (j == 0) {
                printf("Variable not found\n");
            }
        }
        else if (n == 5) {
            printf("Symbol Table:- \nSymbol and address\n");
            for (int i = 0; i < 10; i++) {
                if (table[i].var[0] != '\0') {
                    printf("%s = %d\n", table[i].var, table[i].add);
                }
            }
        }
        else if (n == 6) {
            break;
        }
    }
    return 0;
}
